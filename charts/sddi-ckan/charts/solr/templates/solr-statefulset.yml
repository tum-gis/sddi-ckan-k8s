{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "solr.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "solr.labels" . | nindent 4 }}
    app.kubernetes.io/part-of: sddi-ckan
    app.kubernetes.io/component: {{ .Values.component }}
spec:
  serviceName: {{ include "solr.fullname" . }}-hl
  selector:
    matchLabels:
      {{- include "solr.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ .Values.component }}
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "solr.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ .Values.component }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "solr.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "solr.fullname" . }}
        - name: init
          configMap:
            name: {{ include "solr.fullname" . }}-init

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: CKAN_CORE_NAME
              value: "ckan"
          ports:
            - name: solr
              containerPort: 8983
              protocol: TCP

          volumeMounts:
            - name: data
              mountPath: /var/solr/data
            - name: init
              mountPath: /docker-entrypoint-initdb.d/ckan_init_solr.sh
              subPath: ckan_init_solr.sh

          # livenessProbe:
          #   periodSeconds: 10
          #   timeoutSeconds: 2
          #   exec:
          #     command: [ sh, -c, "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]

          # readinessProbe:
          #   initialDelaySeconds: 15
          #   periodSeconds: 10
          #   timeoutSeconds: 2
          #   exec:
          #     command: [ sh, -c, "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}}
